{
  "openapi": "3.0.1",
  "info": {
    "title": "Books rest API",
    "description": "Simple Books rest API, using php symfony. For this sample, you can use the api key `special-key` to test the authorization filters.",
    "termsOfService": "https://github.com/akred/books_rest_api",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:50000/v2"
    }
  ],
  "tags": [
    {
      "name": "book",
      "description": "Access to your books"
    },
    {
      "name": "library",
      "description": "Access to your libraires"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-crudOperationSemantics": "create",
        "x-crudResourceType": "user",
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "x-crudOperationSemantics": "read",
        "x-crudResourceType": "user"
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "x-crudOperationSemantics": "update",
        "x-crudResourceType": "user",
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "x-crudOperationSemantics": "delete",
        "x-crudResourceType": "user"
      }
    },
    "/book": {
      "put": {
        "tags": [
          "book"
        ],
        "summary": "Update an existing book",
        "operationId": "updateBook",
        "requestBody": {
          "description": "Book object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Book not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "update",
        "x-crudResourceType": "book",
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "book"
        ],
        "summary": "Add a new book",
        "operationId": "addBook",
        "requestBody": {
          "description": "Book object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "create",
        "x-crudResourceType": "book",
        "x-codegen-request-body-name": "body"
      }
    },
    "/book/findAll": {
      "get": {
        "tags": [
          "book"
        ],
        "summary": "Retrieve all the books",
        "description": "Retrieve all the books",
        "operationId": "findAllBooks",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "read-multi",
        "x-crudResourceType": "book"
      }
    },
    "/book/{bookId}": {
      "get": {
        "tags": [
          "book"
        ],
        "summary": "Find book by ID",
        "description": "Returns a single book",
        "operationId": "getBookById",
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "description": "ID of book to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Book not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-crudOperationSemantics": "read",
        "x-crudResourceType": "book"
      },
      "post": {
        "tags": [
          "book"
        ],
        "summary": "Updates a book with form data",
        "operationId": "updateBookWithForm",
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "description": "ID of book that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Updated name of the book"
                  },
                  "author": {
                    "type": "string",
                    "description": "Updated author of the book"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "update",
        "x-crudResourceType": "book"
      },
      "delete": {
        "tags": [
          "book"
        ],
        "summary": "Deletes a book",
        "operationId": "deleteBook",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookId",
            "in": "path",
            "description": "Book id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Book not found",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "delete",
        "x-crudResourceType": "book"
      }
    },
    "/library": {
      "put": {
        "tags": [
          "library"
        ],
        "summary": "Update an existing library",
        "operationId": "updateLibrary",
        "requestBody": {
          "description": "Library object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Library not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "update",
        "x-crudResourceType": "library",
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "library"
        ],
        "summary": "Add a new library",
        "operationId": "addLibrary",
        "requestBody": {
          "description": "Library object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Library"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "create",
        "x-crudResourceType": "library",
        "x-codegen-request-body-name": "body"
      }
    },
    "/library/findAll": {
      "get": {
        "tags": [
          "library"
        ],
        "summary": "Retrieve all the libraries",
        "description": "Retrieve all the libraries",
        "operationId": "findAllLibraries",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Library"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Library"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "read-multi",
        "x-crudResourceType": "library",
        "x-crudResourceIdentifier": true
      }
    },
    "/library/{libraryId}": {
      "get": {
        "tags": [
          "library"
        ],
        "summary": "Find library by ID",
        "description": "Returns a single library",
        "operationId": "getLibraryById",
        "parameters": [
          {
            "name": "libraryId",
            "in": "path",
            "description": "ID of library to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Library"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Library"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Library not found",
            "content": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ],
        "x-crudOperationSemantics": "read",
        "x-crudResourceType": "library"
      },
      "post": {
        "tags": [
          "library"
        ],
        "summary": "Updates a library with form data",
        "operationId": "updateLibraryWithForm",
        "parameters": [
          {
            "name": "libraryId",
            "in": "path",
            "description": "ID of library that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the library"
                  },
                  "city": {
                    "type": "string",
                    "description": "Updated city of the library"
                  },
                  "country": {
                    "type": "string",
                    "description": "Updated country of the library"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "update",
        "x-crudResourceType": "library"
      },
      "delete": {
        "tags": [
          "library"
        ],
        "summary": "Deletes a library",
        "operationId": "deleteLibrary",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "libraryId",
            "in": "path",
            "description": "Library id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-crudResourceIdentifier": true
            },
            "x-crudResourceIdentifier": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Library not found",
            "content": {}
          }
        },
        "security": [
          {
            "bookstore_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "x-crudOperationSemantics": "delete",
        "x-crudResourceType": "library"
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "books": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Book"
            }
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Book": {
        "required": [
          "author",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "x-crudResourceIdentifier": true
          },
          "title": {
            "type": "string",
            "example": "Harry Potter and the magic light"
          },
          "author": {
            "type": "string",
            "example": "JK Rowling"
          },
          "librairies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Library"
            }
          }
        },
        "xml": {
          "name": "Book"
        }
      },
      "Library": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "x-crudResourceIdentifier": true
          },
          "name": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Library"
        }
      }
    },
    "securitySchemes": {
      "bookstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://bookstore.swagger.io/oauth/dialog",
            "scopes": {
              "write:books": "modify your books",
              "read:books": "read your books"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}